# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Market_pb2 as Market__pb2


class RegisterSellerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterSellerMethod = channel.unary_unary(
                '/RegisterSellerService/RegisterSellerMethod',
                request_serializer=Market__pb2.SellerInfo.SerializeToString,
                response_deserializer=Market__pb2.ResponseInfo.FromString,
                )


class RegisterSellerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterSellerMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegisterSellerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterSellerMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSellerMethod,
                    request_deserializer=Market__pb2.SellerInfo.FromString,
                    response_serializer=Market__pb2.ResponseInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RegisterSellerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegisterSellerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterSellerMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegisterSellerService/RegisterSellerMethod',
            Market__pb2.SellerInfo.SerializeToString,
            Market__pb2.ResponseInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SellItemServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SellItemMethod = channel.unary_unary(
                '/SellItemService/SellItemMethod',
                request_serializer=Market__pb2.SellItem.SerializeToString,
                response_deserializer=Market__pb2.ResponseInfoSellItem.FromString,
                )


class SellItemServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SellItemMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SellItemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SellItemMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.SellItemMethod,
                    request_deserializer=Market__pb2.SellItem.FromString,
                    response_serializer=Market__pb2.ResponseInfoSellItem.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SellItemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SellItemService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SellItemMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SellItemService/SellItemMethod',
            Market__pb2.SellItem.SerializeToString,
            Market__pb2.ResponseInfoSellItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UpdateItemServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateItemMethod = channel.unary_unary(
                '/UpdateItemService/UpdateItemMethod',
                request_serializer=Market__pb2.updateItem.SerializeToString,
                response_deserializer=Market__pb2.ResponseInfo.FromString,
                )


class UpdateItemServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdateItemMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UpdateItemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateItemMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateItemMethod,
                    request_deserializer=Market__pb2.updateItem.FromString,
                    response_serializer=Market__pb2.ResponseInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UpdateItemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UpdateItemService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdateItemMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UpdateItemService/UpdateItemMethod',
            Market__pb2.updateItem.SerializeToString,
            Market__pb2.ResponseInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DeleteItemServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeleteItemMethod = channel.unary_unary(
                '/DeleteItemService/DeleteItemMethod',
                request_serializer=Market__pb2.deleteItem.SerializeToString,
                response_deserializer=Market__pb2.ResponseInfo.FromString,
                )


class DeleteItemServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DeleteItemMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeleteItemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeleteItemMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteItemMethod,
                    request_deserializer=Market__pb2.deleteItem.FromString,
                    response_serializer=Market__pb2.ResponseInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DeleteItemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeleteItemService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DeleteItemMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DeleteItemService/DeleteItemMethod',
            Market__pb2.deleteItem.SerializeToString,
            Market__pb2.ResponseInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DisplaySellerItemsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DisplaySellerItemsMethod = channel.unary_stream(
                '/DisplaySellerItemsService/DisplaySellerItemsMethod',
                request_serializer=Market__pb2.DisplaySellerItems.SerializeToString,
                response_deserializer=Market__pb2.ItemDetails.FromString,
                )


class DisplaySellerItemsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DisplaySellerItemsMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DisplaySellerItemsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DisplaySellerItemsMethod': grpc.unary_stream_rpc_method_handler(
                    servicer.DisplaySellerItemsMethod,
                    request_deserializer=Market__pb2.DisplaySellerItems.FromString,
                    response_serializer=Market__pb2.ItemDetails.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DisplaySellerItemsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DisplaySellerItemsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DisplaySellerItemsMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DisplaySellerItemsService/DisplaySellerItemsMethod',
            Market__pb2.DisplaySellerItems.SerializeToString,
            Market__pb2.ItemDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SearchItemServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchItemMethod = channel.unary_stream(
                '/SearchItemService/SearchItemMethod',
                request_serializer=Market__pb2.Searchitem.SerializeToString,
                response_deserializer=Market__pb2.ItemDetails.FromString,
                )


class SearchItemServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SearchItemMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearchItemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchItemMethod': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchItemMethod,
                    request_deserializer=Market__pb2.Searchitem.FromString,
                    response_serializer=Market__pb2.ItemDetails.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SearchItemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SearchItemService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SearchItemMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/SearchItemService/SearchItemMethod',
            Market__pb2.Searchitem.SerializeToString,
            Market__pb2.ItemDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BuyitemServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BuyitemMethod = channel.unary_unary(
                '/BuyitemService/BuyitemMethod',
                request_serializer=Market__pb2.Buyitem.SerializeToString,
                response_deserializer=Market__pb2.ResponseInfo.FromString,
                )


class BuyitemServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BuyitemMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BuyitemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BuyitemMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyitemMethod,
                    request_deserializer=Market__pb2.Buyitem.FromString,
                    response_serializer=Market__pb2.ResponseInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BuyitemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BuyitemService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BuyitemMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BuyitemService/BuyitemMethod',
            Market__pb2.Buyitem.SerializeToString,
            Market__pb2.ResponseInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AddtoWishlistServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddtoWishlistMethod = channel.unary_unary(
                '/AddtoWishlistService/AddtoWishlistMethod',
                request_serializer=Market__pb2.AddtoWishlist.SerializeToString,
                response_deserializer=Market__pb2.ResponseInfo.FromString,
                )


class AddtoWishlistServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddtoWishlistMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AddtoWishlistServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddtoWishlistMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.AddtoWishlistMethod,
                    request_deserializer=Market__pb2.AddtoWishlist.FromString,
                    response_serializer=Market__pb2.ResponseInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AddtoWishlistService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AddtoWishlistService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddtoWishlistMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AddtoWishlistService/AddtoWishlistMethod',
            Market__pb2.AddtoWishlist.SerializeToString,
            Market__pb2.ResponseInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RateitemServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RateitemMethod = channel.unary_unary(
                '/RateitemService/RateitemMethod',
                request_serializer=Market__pb2.Rateitem.SerializeToString,
                response_deserializer=Market__pb2.ResponseInfo.FromString,
                )


class RateitemServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RateitemMethod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RateitemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RateitemMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.RateitemMethod,
                    request_deserializer=Market__pb2.Rateitem.FromString,
                    response_serializer=Market__pb2.ResponseInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RateitemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RateitemService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RateitemMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RateitemService/RateitemMethod',
            Market__pb2.Rateitem.SerializeToString,
            Market__pb2.ResponseInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class NotifyClientServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifyClient = channel.unary_unary(
                '/NotifyClientService/NotifyClient',
                request_serializer=Market__pb2.ItemDetails.SerializeToString,
                response_deserializer=Market__pb2.ResponseInfo.FromString,
                )


class NotifyClientServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NotifyClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotifyClientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NotifyClient': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyClient,
                    request_deserializer=Market__pb2.ItemDetails.FromString,
                    response_serializer=Market__pb2.ResponseInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NotifyClientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NotifyClientService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NotifyClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NotifyClientService/NotifyClient',
            Market__pb2.ItemDetails.SerializeToString,
            Market__pb2.ResponseInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
